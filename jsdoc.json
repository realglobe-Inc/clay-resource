{
  "classes": [
    {
      "name": "ClayResource",
      "description": "",
      "extends": [
        "AnnotateMixed",
        "CloneMixed",
        "InboundMixed",
        "OutboundMixed",
        "PolicyMixed",
        "RefMixed",
        "SubMixed",
        "ThrowMixed",
        "InternalMixed",
        "PrepareMixed",
        "DecorateMixed",
        "CacheMixed"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "ClayResource",
        "description": "Resource accessor",
        "parameters": [
          {
            "name": "nameString",
            "type": "string",
            "description": "Name string",
            "default": "",
            "optional": "",
            "nullable": ""
          },
          {
            "name": "bounds",
            "type": "Object.<string, function()>",
            "description": "Method bounds",
            "default": "",
            "optional": "",
            "nullable": ""
          },
          {
            "name": "options",
            "type": "Object",
            "description": "Optional settings",
            "default": "{}",
            "optional": true,
            "nullable": ""
          },
          {
            "name": "options.annotates",
            "type": "boolean",
            "description": "Enable annotation",
            "default": "",
            "optional": true,
            "nullable": ""
          },
          {
            "name": "options.refs",
            "type": "Array.<ClayResource>",
            "description": "Add resource refs",
            "default": "",
            "optional": true,
            "nullable": ""
          }
        ],
        "examples": []
      },
      "functions": [
        {
          "name": "one",
          "access": "",
          "virtual": false,
          "description": "Get a resource",
          "parameters": [
            {
              "name": "id",
              "type": "ClayId",
              "description": "Id of the entity",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryOne () {\n  let product = await Product.one(1) // Find by id\n  console.log(product)\n}"
          ],
          "returns": {
            "type": "Promise.<ClayEntity>",
            "description": "Found entity"
          }
        },
        {
          "name": "list",
          "access": "",
          "virtual": false,
          "description": "List entities from resource",
          "parameters": [
            {
              "name": "condition",
              "type": "ListCondition",
              "description": "List condition query",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "condition.filter",
              "type": "FilterTerm",
              "description": "Filter condition",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "condition.page",
              "type": "PagerTerm",
              "description": "Page condition",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "condition.page.number",
              "type": "number",
              "description": "Number of page, start with 1",
              "default": 1,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "condition.page.size",
              "type": "number",
              "description": "Number of resources per page",
              "default": 100,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "condition.sort",
              "type": "SortTerm",
              "description": "Sort condition",
              "default": "[]",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryList () {\n  let products = await Product.list({\n    filter: { type: 'Vehicle' },  // Filter condition\n    page: { number: 1, size: 25 }, // Paginate\n    sort: [ 'createdAt', '-name' ] // Sort condition\n  })\n  console.log(products)\n}\ntryList()"
          ],
          "returns": {
            "type": "Promise.<ClayCollection>",
            "description": "Found resource collection"
          }
        },
        {
          "name": "create",
          "access": "",
          "virtual": false,
          "description": "Create a new entity with resource",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "Resource attributes to create",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryCreate () {\n  let product = await Product.create({\n    name: 'Super Car',\n    type: 'Vehicle'\n  })\n  console.log(product)\n}\ntryCreate()"
          ],
          "returns": {
            "type": "Promise.<ClayEntity>",
            "description": "Created data"
          }
        },
        {
          "name": "update",
          "access": "",
          "virtual": false,
          "description": "Update an existing entity in resource",
          "parameters": [
            {
              "name": "id",
              "type": "ClayId",
              "description": "Resource id",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "attributes",
              "type": "Object",
              "description": "Resource attributes to update",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryUpdate () {\n  let product = await Product.update(1, {\n    name: 'Super Super Car'\n  })\n  console.log(product)\n}\ntryUpdate()"
          ],
          "returns": {
            "type": "Promise.<ClayEntity>",
            "description": "Updated data"
          }
        },
        {
          "name": "destroy",
          "access": "",
          "virtual": false,
          "description": "Delete a entity resource",
          "parameters": [
            {
              "name": "id",
              "type": "ClayId",
              "description": "Resource id",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryDestroy () {\n  await Product.destroy(1)\n}\ntryDestroy()"
          ],
          "returns": {
            "type": "Promise.<number>",
            "description": "Destroyed count (0 or 1)"
          }
        },
        {
          "name": "drop",
          "access": "",
          "virtual": false,
          "description": "Drop resource",
          "parameters": [],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryDrop () {\n  await Product.drop()\n}\ntryDrop()"
          ],
          "returns": {
            "type": "Promise.<boolean>",
            "description": "False if there were nothing to drop"
          }
        },
        {
          "name": "oneBulk",
          "access": "",
          "virtual": false,
          "description": "One as bulk",
          "parameters": [
            {
              "name": "ids",
              "type": "Array.<ClayId>",
              "description": "Resource ids",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryOneBulk () {\n  let products = await Product.oneBulk([ 1, 5, 10 ])\n  console.log(products)\n}\ntryOneBulk()"
          ],
          "returns": {
            "type": "Promise.<Object.<ClayId, ClayEntity>>",
            "description": "Found resources"
          }
        },
        {
          "name": "listBulk",
          "access": "",
          "virtual": false,
          "description": "List with multiple conditions",
          "parameters": [
            {
              "name": "conditionArray",
              "type": "Array.<ListCondition>",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryListBulk () {\n  let [ cars, ships ] = await Product.listBulk([\n    { filter: { type: 'CAR' } },\n    { filter: { type: 'SHIP' } },\n  ])\n  console.log(cars)\n  console.log(ships)\n}\ntryListBulk()"
          ],
          "returns": {
            "type": "Promise.<Array.<ClayCollection>>",
            "description": "Found resource collections"
          }
        },
        {
          "name": "createBulk",
          "access": "",
          "virtual": false,
          "description": "Create multiple resources",
          "parameters": [
            {
              "name": "attributesArray",
              "type": "Array.<Object>",
              "description": "List of attributes",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryCreateBulk () {\n  let products = await Product.createBulk([\n    { name: 'Super Orange', type: 'CAR' },\n    { name: 'Ultra Green', type: 'CAR' },\n  ])\n  console.log(products)\n}\ntryCreateBulk()"
          ],
          "returns": {
            "type": "Promise.<Array.<ClayEntity>>",
            "description": "Created resources"
          }
        },
        {
          "name": "updateBulk",
          "access": "",
          "virtual": false,
          "description": "Update multiple resources",
          "parameters": [
            {
              "name": "attributesHash",
              "type": "Object.<ClayId, Object>",
              "description": "Hash of attributes",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryUpdateBulk () {\n  let products = await Product.updateBulk({\n    '1': { name: 'Super Super Orange' },\n    '2': { name: 'Ultra Ultra Green' },\n  })\n  console.log(products)\n}\ntryUpdateBulk()"
          ],
          "returns": {
            "type": "Promise.<Object.<ClayId, ClayEntity>>",
            "description": "Updated resources"
          }
        },
        {
          "name": "destroyBulk",
          "access": "",
          "virtual": false,
          "description": "Update multiple resources",
          "parameters": [
            {
              "name": "ids",
              "type": "Array.<ClayId>",
              "description": "Ids to destroy",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryDestroyBulk () {\n  await Product.destroyBulk([1, 2])\n})\ntryDestroyBulk()"
          ],
          "returns": {
            "type": "Promise.<number>",
            "description": "Destroyed counts"
          }
        },
        {
          "name": "cursor",
          "access": "",
          "virtual": false,
          "description": "Create cursor to cursor",
          "parameters": [
            {
              "name": "options",
              "type": "Object",
              "description": "Optional settings",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.filter",
              "type": "FilterTerm",
              "description": "Filter condition",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.sort",
              "type": "SortTerm",
              "description": "Sort condition",
              "default": "[]",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryCursor () {\n  let cursor = await Product.cursor({\n    filter: { type: 'CAR' }\n  })\n  console.log(cursor.length) // Number of entities matches the condition\n  for (let fetch of cursor) {\n    let car = yield fetch() // Fetch the pointed entity\n    console.log(car)\n  }\n}\ntryCursor()"
          ],
          "returns": {
            "type": "Object",
            "description": "{Promise.<[Symbol.iterator], function>} Iterable cursor"
          }
        },
        {
          "name": "first",
          "access": "",
          "virtual": false,
          "description": "Get the first entity matches filter",
          "parameters": [
            {
              "name": "filter",
              "type": "FilterTerm",
              "description": "Listing filter",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options",
              "type": "Object",
              "description": "Optional settings",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.sort",
              "type": "Object",
              "description": "Sort conditions",
              "default": "[]",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryFirst () {\n  let product = Product.first({ name: 'Super Super Orange' })\n  console.log('product')\n}\ntryFirst()"
          ],
          "returns": {
            "type": "Promise.<?ClayEntity>",
            "description": "Found one"
          }
        },
        {
          "name": "seal",
          "access": "",
          "virtual": false,
          "description": "Seal resources",
          "parameters": [
            {
              "name": "privateKey",
              "type": "string",
              "description": "RSA Private key",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "options",
              "type": "Object",
              "description": "Optional settings",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.by",
              "type": "string",
              "description": "For $$by",
              "default": null,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nconst privateKey = 'xxxxxxxxxxxxxxxxxxxxxxxxx'\nasync function trySeal () {\n  await Product.seal(privateKey)\n}\ntrySeal()"
          ],
          "returns": {
            "type": "Promise",
            "description": ""
          }
        },
        {
          "name": "has",
          "access": "",
          "virtual": false,
          "description": "Check entity with id exists",
          "parameters": [
            {
              "name": "id",
              "type": "ClayId",
              "description": "Id of the entity",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryHas () {\n  let has = await Product.has(1)\n  console.log(has)\n}\ntryHas()"
          ],
          "returns": {
            "type": "Promise.<boolean>",
            "description": "Exists or not"
          }
        },
        {
          "name": "exists",
          "access": "",
          "virtual": false,
          "description": "Check data exists with filter",
          "parameters": [
            {
              "name": "filter",
              "type": "FilterTerm",
              "description": "List filter",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryExists () {\n  let exists = await Product.exists({ name: 'Super Super Orange' })\n  console.log(exists)\n}\ntryExists()"
          ],
          "returns": {
            "type": "Promise.<boolean>",
            "description": "Exists or not"
          }
        },
        {
          "name": "count",
          "access": "",
          "virtual": false,
          "description": "Count data matches filter",
          "parameters": [
            {
              "name": "filter",
              "type": "FilterTerm",
              "description": "List filter",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryCount () {\n  let count = await Product.count({ type: 'CAR' })\n  console.log(count)\n}\ntryCount()"
          ],
          "returns": {
            "type": "Promise.<number>",
            "description": "Number of entities"
          }
        },
        {
          "name": "of",
          "access": "",
          "virtual": false,
          "description": "Find entity with attributes and returns if found.\nIf not found, create and return the one.",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "Attributes",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "const Product = lump.resource('Product')\nasync function tryOf () {\n  let values = await Product.of({ code: '#1234' })\n  console.log(values)\n}\ntryOf()"
          ]
        },
        {
          "name": "toggleAnnotate",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "Clone the instance",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "Cloned instance"
          }
        },
        {
          "name": "addInbound",
          "access": "",
          "virtual": false,
          "description": "Add inbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of inbound",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "inbound",
              "type": "function",
              "description": "Inbound function",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "InboundMixed",
            "description": ""
          }
        },
        {
          "name": "hasInbound",
          "access": "",
          "virtual": false,
          "description": "Check if has inbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of inbound",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "boolean",
            "description": ""
          }
        },
        {
          "name": "removeInbound",
          "access": "",
          "virtual": false,
          "description": "Remove inbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of inbound",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "InboundMixed",
            "description": ""
          }
        },
        {
          "name": "applyInbound",
          "access": "",
          "virtual": false,
          "description": "Apply inbound to array of attributes",
          "parameters": [
            {
              "name": "attributesArray",
              "type": "Array.<EntityAttributes>",
              "description": "Array of attributes",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "ActionContext",
              "description": "Context for resource action",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<EntityAttributes>>",
            "description": "Inbounded attributes array"
          }
        },
        {
          "name": "inboundAttributes",
          "access": "",
          "virtual": false,
          "description": "Inbound attributes",
          "parameters": [
            {
              "name": "attributes",
              "type": "EntityAttributes",
              "description": "Attributes to inbound",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "ActionContext",
              "description": "Context for resource action",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<EntityAttributes>",
            "description": "Inbounded attributes"
          }
        },
        {
          "name": "inboundAttributesArray",
          "access": "",
          "virtual": false,
          "description": "Inbound attributes array",
          "parameters": [
            {
              "name": "attributesArray",
              "type": "Array.<EntityAttributes>",
              "description": "Attributes array to inbound",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "ActionContext",
              "description": "Context for resource action",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<EntityAttributes>>",
            "description": "Inbounded attributes array"
          }
        },
        {
          "name": "inboundAttributesHash",
          "access": "",
          "virtual": false,
          "description": "Inbound attributes hash",
          "parameters": [
            {
              "name": "attributesHash",
              "type": "AttributesHash",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "ActionContext",
              "description": "Context for resource action",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<AttributesHash>",
            "description": ""
          }
        },
        {
          "name": "addOutbound",
          "access": "",
          "virtual": false,
          "description": "Add outbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of outbound",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "handler",
              "type": "function",
              "description": "Format handler function",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "OutboundMixed",
            "description": ""
          }
        },
        {
          "name": "hasOutbound",
          "access": "",
          "virtual": false,
          "description": "Check if has outbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of outbound",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "boolean",
            "description": ""
          }
        },
        {
          "name": "removeOutbound",
          "access": "",
          "virtual": false,
          "description": "Remove outbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of outbound",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "OutboundMixed",
            "description": ""
          }
        },
        {
          "name": "applyOutbound",
          "access": "",
          "virtual": false,
          "description": "Apply outbound to entities",
          "parameters": [
            {
              "name": "entities",
              "type": "Array.<ClayEntity>",
              "description": "Entities to outbound",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<ClayEntity>>",
            "description": "Formatted entities"
          }
        },
        {
          "name": "outboundEntity",
          "access": "",
          "virtual": false,
          "description": "Format entity",
          "parameters": [
            {
              "name": "entity",
              "type": "ClayEntity",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<ClayEntity>",
            "description": ""
          }
        },
        {
          "name": "outboundEntityArray",
          "access": "",
          "virtual": false,
          "description": "Proses entity array",
          "parameters": [
            {
              "name": "entityArray",
              "type": "Array.<ClayEntity>",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<ClayEntity>>",
            "description": ""
          }
        },
        {
          "name": "outboundCollection",
          "access": "",
          "virtual": false,
          "description": "Format entity collection",
          "parameters": [
            {
              "name": "collection",
              "type": "ClayCollection",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<ClayCollection>",
            "description": ""
          }
        },
        {
          "name": "outboundEntityHash",
          "access": "",
          "virtual": false,
          "description": "Format entity hash",
          "parameters": [
            {
              "name": "entityHash",
              "type": "EntityHash",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<EntityHash>",
            "description": ""
          }
        },
        {
          "name": "outboundCollectionArray",
          "access": "",
          "virtual": false,
          "description": "Format collection array",
          "parameters": [
            {
              "name": "collectionArray",
              "type": "CollectionArray",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<CollectionArray>",
            "description": ""
          }
        },
        {
          "name": "getPolicy",
          "access": "",
          "virtual": false,
          "description": "Get the policy",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "ClayPolicy",
            "description": ""
          }
        },
        {
          "name": "setPolicy",
          "access": "",
          "virtual": false,
          "description": "Set policy",
          "parameters": [
            {
              "name": "policy",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "PolicyMix",
            "description": "this"
          }
        },
        {
          "name": "removePolicy",
          "access": "",
          "virtual": false,
          "description": "Remove policy",
          "parameters": [],
          "examples": []
        },
        {
          "name": "fetchPolicy",
          "access": "",
          "virtual": false,
          "description": "Fetch policy from db",
          "parameters": [
            {
              "name": "digest",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<ClayPolicy>",
            "description": ""
          }
        },
        {
          "name": "savePolicy",
          "access": "",
          "virtual": false,
          "description": "Save policy",
          "parameters": [
            {
              "name": "policy",
              "type": "ClayPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<string>",
            "description": "Digest of saved policy"
          }
        },
        {
          "name": "addRef",
          "access": "",
          "virtual": false,
          "description": "Add resource ref",
          "parameters": [
            {
              "name": "resourceName",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "resource",
              "type": "ClayResource",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasRef",
          "access": "",
          "virtual": false,
          "description": "has resources ref",
          "parameters": [
            {
              "name": "resourceName",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "boolean",
            "description": ""
          }
        },
        {
          "name": "removeRef",
          "access": "",
          "virtual": false,
          "description": "Remove resource ref",
          "parameters": [
            {
              "name": "resourceName",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "FormatMix",
            "description": ""
          }
        },
        {
          "name": "sub",
          "access": "",
          "virtual": false,
          "description": "Get sub resource",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "ClayResource",
            "description": ""
          }
        },
        {
          "name": "subNames",
          "access": "",
          "virtual": false,
          "description": "Get names of sub resources",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<string>>",
            "description": ""
          }
        },
        {
          "name": "throwEntityNotFoundError",
          "access": "",
          "virtual": false,
          "description": "Throw entity not found error",
          "parameters": [
            {
              "name": "id",
              "type": "ClayId",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "internal",
          "access": "",
          "virtual": false,
          "description": "Get internal resource",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "ClayResource",
            "description": ""
          }
        },
        {
          "name": "internalNames",
          "access": "",
          "virtual": false,
          "description": "Get names of internal resources",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<string>>",
            "description": ""
          }
        },
        {
          "name": "prepareIfNeeded",
          "access": "",
          "virtual": false,
          "description": "Do prepare if needed",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Promise",
            "description": ""
          }
        },
        {
          "name": "prepare",
          "access": "",
          "virtual": false,
          "description": "Do preparing",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Promise.<Object>",
            "description": ""
          }
        },
        {
          "name": "addPrepareTask",
          "access": "",
          "virtual": false,
          "description": "Add prepare task",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of task",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "task",
              "type": "function",
              "description": "Task function",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "PrepareMixed",
            "description": "Returns this"
          }
        },
        {
          "name": "hasPrepareTask",
          "access": "",
          "virtual": false,
          "description": "Check if has task",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "boolean",
            "description": "Has or not"
          }
        },
        {
          "name": "removePrepareTask",
          "access": "",
          "virtual": false,
          "description": "Remove a task",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of task",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "PrepareMixed",
            "description": ""
          }
        },
        {
          "name": "setNeedsPrepare",
          "access": "",
          "virtual": false,
          "description": "Set needs prepare",
          "parameters": [
            {
              "name": "needsPrepare",
              "type": "boolean",
              "description": "Needs preparing",
              "default": true,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "PrepareMixed",
            "description": "Returns self"
          }
        },
        {
          "name": "decorate",
          "access": "",
          "virtual": false,
          "description": "Decorate a method",
          "parameters": [
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "decorate",
              "type": "function",
              "description": "Decorate function",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "DecorateMixed",
            "description": "Returns this"
          }
        },
        {
          "name": "caches",
          "access": "",
          "virtual": false,
          "description": "Toggle caching",
          "parameters": [
            {
              "name": "caches",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "caches",
              "type": "boolean",
              "description": "Should cache or not",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "CacheMixed",
            "description": "this"
          }
        },
        {
          "name": "storeCache",
          "access": "",
          "virtual": false,
          "description": "Store an entity into cache",
          "parameters": [
            {
              "name": "entity",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "gainCache",
          "access": "",
          "virtual": false,
          "description": "Gain entity from cache",
          "parameters": [
            {
              "name": "id",
              "type": "ClayId",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "requestCacheClear",
          "access": "",
          "virtual": false,
          "description": "Request cache clear",
          "parameters": [
            {
              "name": "ids",
              "type": [
                "ClayId",
                "Array.<ClayId>"
              ],
              "description": "Ids to clear",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "AnnotateMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "AnnotateMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "toggleAnnotate",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        }
      ]
    },
    {
      "name": "CacheMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "CacheMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "caches",
          "access": "",
          "virtual": false,
          "description": "Toggle caching",
          "parameters": [
            {
              "name": "caches",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "caches",
              "type": "boolean",
              "description": "Should cache or not",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "CacheMixed",
            "description": "this"
          }
        },
        {
          "name": "storeCache",
          "access": "",
          "virtual": false,
          "description": "Store an entity into cache",
          "parameters": [
            {
              "name": "entity",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "gainCache",
          "access": "",
          "virtual": false,
          "description": "Gain entity from cache",
          "parameters": [
            {
              "name": "id",
              "type": "ClayId",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "requestCacheClear",
          "access": "",
          "virtual": false,
          "description": "Request cache clear",
          "parameters": [
            {
              "name": "ids",
              "type": [
                "ClayId",
                "Array.<ClayId>"
              ],
              "description": "Ids to clear",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "CloneMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "CloneMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "Clone the instance",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "Cloned instance"
          }
        }
      ]
    },
    {
      "name": "DecorateMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "DecorateMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "decorate",
          "access": "",
          "virtual": false,
          "description": "Decorate a method",
          "parameters": [
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "decorate",
              "type": "function",
              "description": "Decorate function",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "DecorateMixed",
            "description": "Returns this"
          }
        }
      ]
    },
    {
      "name": "InboundMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "InboundMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "addInbound",
          "access": "",
          "virtual": false,
          "description": "Add inbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of inbound",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "inbound",
              "type": "function",
              "description": "Inbound function",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "InboundMixed",
            "description": ""
          }
        },
        {
          "name": "hasInbound",
          "access": "",
          "virtual": false,
          "description": "Check if has inbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of inbound",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "boolean",
            "description": ""
          }
        },
        {
          "name": "removeInbound",
          "access": "",
          "virtual": false,
          "description": "Remove inbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of inbound",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "InboundMixed",
            "description": ""
          }
        },
        {
          "name": "applyInbound",
          "access": "",
          "virtual": false,
          "description": "Apply inbound to array of attributes",
          "parameters": [
            {
              "name": "attributesArray",
              "type": "Array.<EntityAttributes>",
              "description": "Array of attributes",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "ActionContext",
              "description": "Context for resource action",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<EntityAttributes>>",
            "description": "Inbounded attributes array"
          }
        },
        {
          "name": "inboundAttributes",
          "access": "",
          "virtual": false,
          "description": "Inbound attributes",
          "parameters": [
            {
              "name": "attributes",
              "type": "EntityAttributes",
              "description": "Attributes to inbound",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "ActionContext",
              "description": "Context for resource action",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<EntityAttributes>",
            "description": "Inbounded attributes"
          }
        },
        {
          "name": "inboundAttributesArray",
          "access": "",
          "virtual": false,
          "description": "Inbound attributes array",
          "parameters": [
            {
              "name": "attributesArray",
              "type": "Array.<EntityAttributes>",
              "description": "Attributes array to inbound",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "ActionContext",
              "description": "Context for resource action",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<EntityAttributes>>",
            "description": "Inbounded attributes array"
          }
        },
        {
          "name": "inboundAttributesHash",
          "access": "",
          "virtual": false,
          "description": "Inbound attributes hash",
          "parameters": [
            {
              "name": "attributesHash",
              "type": "AttributesHash",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "ActionContext",
              "description": "Context for resource action",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<AttributesHash>",
            "description": ""
          }
        }
      ]
    },
    {
      "name": "InternalMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "InternalMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "internal",
          "access": "",
          "virtual": false,
          "description": "Get internal resource",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "ClayResource",
            "description": ""
          }
        },
        {
          "name": "internalNames",
          "access": "",
          "virtual": false,
          "description": "Get names of internal resources",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<string>>",
            "description": ""
          }
        }
      ]
    },
    {
      "name": "OutboundMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "OutboundMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "addOutbound",
          "access": "",
          "virtual": false,
          "description": "Add outbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of outbound",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "handler",
              "type": "function",
              "description": "Format handler function",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "OutboundMixed",
            "description": ""
          }
        },
        {
          "name": "hasOutbound",
          "access": "",
          "virtual": false,
          "description": "Check if has outbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of outbound",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "boolean",
            "description": ""
          }
        },
        {
          "name": "removeOutbound",
          "access": "",
          "virtual": false,
          "description": "Remove outbound",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of outbound",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "OutboundMixed",
            "description": ""
          }
        },
        {
          "name": "applyOutbound",
          "access": "",
          "virtual": false,
          "description": "Apply outbound to entities",
          "parameters": [
            {
              "name": "entities",
              "type": "Array.<ClayEntity>",
              "description": "Entities to outbound",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<ClayEntity>>",
            "description": "Formatted entities"
          }
        },
        {
          "name": "outboundEntity",
          "access": "",
          "virtual": false,
          "description": "Format entity",
          "parameters": [
            {
              "name": "entity",
              "type": "ClayEntity",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<ClayEntity>",
            "description": ""
          }
        },
        {
          "name": "outboundEntityArray",
          "access": "",
          "virtual": false,
          "description": "Proses entity array",
          "parameters": [
            {
              "name": "entityArray",
              "type": "Array.<ClayEntity>",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<ClayEntity>>",
            "description": ""
          }
        },
        {
          "name": "outboundCollection",
          "access": "",
          "virtual": false,
          "description": "Format entity collection",
          "parameters": [
            {
              "name": "collection",
              "type": "ClayCollection",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<ClayCollection>",
            "description": ""
          }
        },
        {
          "name": "outboundEntityHash",
          "access": "",
          "virtual": false,
          "description": "Format entity hash",
          "parameters": [
            {
              "name": "entityHash",
              "type": "EntityHash",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<EntityHash>",
            "description": ""
          }
        },
        {
          "name": "outboundCollectionArray",
          "access": "",
          "virtual": false,
          "description": "Format collection array",
          "parameters": [
            {
              "name": "collectionArray",
              "type": "CollectionArray",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "actionContext",
              "type": "Object",
              "description": "",
              "default": "{}",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<CollectionArray>",
            "description": ""
          }
        }
      ]
    },
    {
      "name": "PolicyMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "PolicyMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "getPolicy",
          "access": "",
          "virtual": false,
          "description": "Get the policy",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "ClayPolicy",
            "description": ""
          }
        },
        {
          "name": "setPolicy",
          "access": "",
          "virtual": false,
          "description": "Set policy",
          "parameters": [
            {
              "name": "policy",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "PolicyMix",
            "description": "this"
          }
        },
        {
          "name": "removePolicy",
          "access": "",
          "virtual": false,
          "description": "Remove policy",
          "parameters": [],
          "examples": []
        },
        {
          "name": "fetchPolicy",
          "access": "",
          "virtual": false,
          "description": "Fetch policy from db",
          "parameters": [
            {
              "name": "digest",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<ClayPolicy>",
            "description": ""
          }
        },
        {
          "name": "savePolicy",
          "access": "",
          "virtual": false,
          "description": "Save policy",
          "parameters": [
            {
              "name": "policy",
              "type": "ClayPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Promise.<string>",
            "description": "Digest of saved policy"
          }
        }
      ]
    },
    {
      "name": "PrepareMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "PrepareMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "prepareIfNeeded",
          "access": "",
          "virtual": false,
          "description": "Do prepare if needed",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Promise",
            "description": ""
          }
        },
        {
          "name": "prepare",
          "access": "",
          "virtual": false,
          "description": "Do preparing",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Promise.<Object>",
            "description": ""
          }
        },
        {
          "name": "addPrepareTask",
          "access": "",
          "virtual": false,
          "description": "Add prepare task",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of task",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "task",
              "type": "function",
              "description": "Task function",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "PrepareMixed",
            "description": "Returns this"
          }
        },
        {
          "name": "hasPrepareTask",
          "access": "",
          "virtual": false,
          "description": "Check if has task",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "boolean",
            "description": "Has or not"
          }
        },
        {
          "name": "removePrepareTask",
          "access": "",
          "virtual": false,
          "description": "Remove a task",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of task",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "PrepareMixed",
            "description": ""
          }
        },
        {
          "name": "setNeedsPrepare",
          "access": "",
          "virtual": false,
          "description": "Set needs prepare",
          "parameters": [
            {
              "name": "needsPrepare",
              "type": "boolean",
              "description": "Needs preparing",
              "default": true,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "PrepareMixed",
            "description": "Returns self"
          }
        }
      ]
    },
    {
      "name": "RefMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "RefMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "addRef",
          "access": "",
          "virtual": false,
          "description": "Add resource ref",
          "parameters": [
            {
              "name": "resourceName",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "resource",
              "type": "ClayResource",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasRef",
          "access": "",
          "virtual": false,
          "description": "has resources ref",
          "parameters": [
            {
              "name": "resourceName",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "boolean",
            "description": ""
          }
        },
        {
          "name": "removeRef",
          "access": "",
          "virtual": false,
          "description": "Remove resource ref",
          "parameters": [
            {
              "name": "resourceName",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "FormatMix",
            "description": ""
          }
        }
      ]
    },
    {
      "name": "SubMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "SubMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "sub",
          "access": "",
          "virtual": false,
          "description": "Get sub resource",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "ClayResource",
            "description": ""
          }
        },
        {
          "name": "subNames",
          "access": "",
          "virtual": false,
          "description": "Get names of sub resources",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Promise.<Array.<string>>",
            "description": ""
          }
        }
      ]
    },
    {
      "name": "ThrowMixed",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "ThrowMixed",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "throwEntityNotFoundError",
          "access": "",
          "virtual": false,
          "description": "Throw entity not found error",
          "parameters": [
            {
              "name": "id",
              "type": "ClayId",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "fromDriver",
      "access": "",
      "virtual": false,
      "description": "",
      "parameters": [
        {
          "name": "driver",
          "type": "Driver",
          "description": "Driver to bind",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "nameString",
          "type": "string",
          "description": "Resource name string",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "options",
          "type": "Object",
          "description": "Optional settings",
          "default": "{}",
          "optional": true,
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "ClayResource",
        "description": "Resource instance"
      }
    },
    {
      "name": "create",
      "access": "",
      "virtual": false,
      "description": "Create a ClayResource instance",
      "parameters": [
        {
          "name": "args",
          "type": "*",
          "description": "",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "ClayResource",
        "description": ""
      }
    },
    {
      "name": "fromDriver",
      "access": "",
      "virtual": false,
      "description": "Create clayResource class from driver",
      "parameters": [
        {
          "name": "driver",
          "type": "Driver",
          "description": "Driver to bind",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "nameString",
          "type": "string",
          "description": "Resource name string",
          "default": "",
          "optional": "",
          "nullable": ""
        },
        {
          "name": "options",
          "type": "Object",
          "description": "Optional settings",
          "default": "{}",
          "optional": true,
          "nullable": ""
        }
      ],
      "examples": [
        "const { fromDriver } = require('clay-resource')\nconst { SqliteDriver } = require('clay-driver-sqlite')\n{\n  let driver = new SqliteDriver('var/test.db')\n  let resource = fromDriver(driver)\n}"
      ],
      "returns": {
        "type": "ClayResource",
        "description": "Resource instance"
      }
    },
    {
      "name": "annotateMix",
      "access": "",
      "virtual": false,
      "description": "Mixin for annotate feature",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "annotates",
      "access": "",
      "virtual": false,
      "description": "Toggle annotate support",
      "parameters": [
        {
          "name": "annotates",
          "type": "boolean",
          "description": "Should annotate or not",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "AnnotateMixed",
        "description": "this"
      }
    },
    {
      "name": "cacheMix",
      "access": "",
      "virtual": false,
      "description": "Mixin for cache",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "cloneMix",
      "access": "",
      "virtual": false,
      "description": "Mixin for clone feature",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "decorateMix",
      "access": "private",
      "virtual": false,
      "description": "Mix decorate support",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "inboundMix",
      "access": "",
      "virtual": false,
      "description": "Mixin for inbound feature. Convert in-bind data like attributes to create/update",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "internalMix",
      "access": "",
      "virtual": false,
      "description": "Mixin for internal feature",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "outboundMix",
      "access": "",
      "virtual": false,
      "description": "Mixin for outbound feature. Convert out-bind data like entity, collection",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "policyMix",
      "access": "",
      "virtual": false,
      "description": "Mixin for policy feature",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "prepareMix",
      "access": "",
      "virtual": false,
      "description": "Mixin for prepare feature",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "refMix",
      "access": "",
      "virtual": false,
      "description": "Mixin for ref feature",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "subMix",
      "access": "",
      "virtual": false,
      "description": "Mixin for sub feature",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    },
    {
      "name": "throwMix",
      "access": "",
      "virtual": false,
      "description": "Mixin for throw feature.",
      "parameters": [
        {
          "name": "BaseClass",
          "type": "function",
          "description": "Class to mix",
          "default": "",
          "optional": "",
          "nullable": ""
        }
      ],
      "examples": [],
      "returns": {
        "type": "function",
        "description": "Mixed class"
      }
    }
  ]
}